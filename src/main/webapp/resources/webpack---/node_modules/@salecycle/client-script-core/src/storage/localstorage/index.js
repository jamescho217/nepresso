/**
 * A store that uses local storage
 * @module storage/localstorage/index
 */
import * as lsCache from 'lscache';
/// <reference types="lz-string" />
import * as lzw from 'lz-string';
import ScPromise from '../../libs/promises';
import {
    window as browserWindow,
    SafeJson
} from '../../browser_abstraction';
var KEY_COMPRESSED = '#::';
var win = browserWindow();
var LocalStorage = /** @class */ (function() {
    function LocalStorage() {
        // Always clear lsCache before starting
        lsCache.flushExpired();
    }
    Object.defineProperty(LocalStorage.prototype, "Name", {
        get: function() {
            return 'LocalStorage';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get a value for the specified name
     * @param key
     * @param noPrefix {boolean} use the raw value (don't prefix with ls cache)
     * @returns {Object}
     */
    LocalStorage.prototype.getValue = function(name, noPrefix) {
        var value;
        // if we want the raw item - use raw local storage
        if (noPrefix) {
            try {
                return ScPromise.resolve(win.localStorage.getItem(name));
            } catch (ex) {
                return ScPromise.reject(ex);
            }
        } else {
            value = lsCache.get("scls::" + name);
        }
        // if we have no value, just resolve
        if (!value || typeof value === 'object') {
            return ScPromise.resolve(null);
        }
        // check the first char to see if we stored compressed or uncompressed
        if (value.indexOf && value.indexOf(KEY_COMPRESSED) === 0) {
            value = lzw.decompressFromUTF16(value.substring(KEY_COMPRESSED.length));
        }
        try {
            // this seems a silly check, but it can really mess with our machine ID
            if (typeof value === 'string' && (value.charAt(0) === '{' || value.charAt(0) === '[')) {
                value = SafeJson.parse(value);
            }
        } catch (ex) {
            // ignore - it's a string
        }
        return ScPromise.resolve(value);
    };
    /**
     * Adds the specified key and value into local storage
     * will expire in 2 hours by default and cull by expiry if we are running out of space
     * @param {string} key
     * @param {Object} value
     * @param {number} [expiresInMinutes=120]
     * @returns {boolean}
     */
    LocalStorage.prototype.setValue = function(name, value, expiresInMinutes) {
        if (typeof value === 'object') {
            value = SafeJson.stringify(value);
        }
        var compressed = lzw.compressToUTF16(value);
        // if the compressed length is actually longer - don't be silly and store it
        // we set the first character here to represent if the value has been compressed or not for when we read it back out
        if (compressed.length > value.length) {
            compressed = "" + value;
        } else {
            compressed = "" + KEY_COMPRESSED + compressed;
        }
        lsCache.set("scls::" + name, compressed, expiresInMinutes);
        return ScPromise.resolve(true);
    };
    /**
     * Removed the specified key from local storage
     * @param {string} name The key to be deleted
     */
    LocalStorage.prototype.removeValue = function(name) {
        lsCache.remove("scls::" + name);
        return ScPromise.resolve(true);
    };
    return LocalStorage;
}());
var canUseLocalStorage = function(browserCapabilitiesState) {
    if (browserCapabilitiesState.canUseLocalStorage !== null && browserCapabilitiesState.canUseLocalStorage !== undefined) {
        return browserCapabilitiesState.canUseLocalStorage;
    }
    browserCapabilitiesState.canUseLocalStorage = lsCache.supported();
    return browserCapabilitiesState.canUseLocalStorage;
};
/**
 * Get an instance of the local storage store
 * @param browserCapabilities
 * @returns {IStore|null}
 */
export var getStore = function(browserCapabilities) {
    if (!canUseLocalStorage(browserCapabilities)) {
        return null;
    }
    return new LocalStorage();
};



//////////////////
// WEBPACK FOOTER
// ./node_modules/@salecycle/client-script-core/src/storage/localstorage/index.js
// module id = 6
// module chunks = 0