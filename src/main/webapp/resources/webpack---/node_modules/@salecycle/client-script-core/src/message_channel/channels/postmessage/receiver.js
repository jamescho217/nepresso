/**
 * Implements generic handling for post message receivers
 * @module receiver
 */
import apiRequest from '../../../api/request';
import {
    window as browserWindow,
    location as browserLocation,
    SafeJson,
    on as browserOn
} from '../../../browser_abstraction';
import * as logTiny from '@salecycle/log-tiny';
var win = browserWindow();
/**
 * Call the sender with our wrapped payload
 * @param wrappedPayload {Object} the payload we want to pass to the iframe
 */
var callbackToSender = function(wrappedPayload) {
    if (!win.parent || win.parent === win) {
        // we haven't got a parent
        return;
    }
    // we stringify because ie < 10 will always send as a string and this way we are consistent
    win.parent.postMessage(SafeJson.stringify(wrappedPayload), '*');
};
/**
 * Create a wrapped payload we can send to the iframe
 * @param req {Object} the original message
 * @returns {replyClosure} the message we want to send to the igrame
 */
var generateReplyClosure = function(req) {
    var channelGuid = req.channelGuid;
    var ticketGuid = req.ticket.ticketGuid;
    return function(err, payload) {
        var wrappedPayload = {
            channelGuid: channelGuid,
            ticket: {
                payload: payload,
                ticketGuid: ticketGuid
            }
        };
        if (err) {
            logTiny.noop();
            wrappedPayload.err = err;
        }
        callbackToSender(wrappedPayload);
    };
};
/**
 * start listening for messages
 * @param onMessageReceived {function} function to call when we get a message
 */
export var listen = function(onMessageReceived) {
    browserOn('message', function(message) {
        logTiny.noop();
        logTiny.noop();
        // need to wrap everything up in a ticket
        try {
            // sometimes, we have data as empty string. Hence check that
            var messageData = message.data !== '' ? SafeJson.parse(message.data) : {};
            if (messageData && messageData.ticket) {
                onMessageReceived(messageData.ticket.payload, generateReplyClosure(messageData));
            }
        } catch (ex) {
            logTiny.noop();
        }
    });
    // get our frame guid from the query string
    var frameGuid = apiRequest.getQueryStringParameter('sc_frame_id');
    // ok, we're ready to receive, let the caller know
    callbackToSender({
        frameGuid: frameGuid,
        messageType: 'FRAME_READY',
        payload: {},
        receiverUrl: browserLocation().href
    });
};



//////////////////
// WEBPACK FOOTER
// ./node_modules/@salecycle/client-script-core/src/message_channel/channels/postmessage/receiver.js
// module id = 10
// module chunks = 0