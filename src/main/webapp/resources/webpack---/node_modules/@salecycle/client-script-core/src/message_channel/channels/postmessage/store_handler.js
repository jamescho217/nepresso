/**
 * Store handler
 */
/**
 * Handle getting a value from the store
 * @param messagePayload {Object} the incoming message payload
 * @param store {Object} the store to get the value from
 * @param callback {function} callback function
 */
var handleGet = function(messagePayload, store, callback) {
    if (!messagePayload.name) {
        return callback('STOREHANDLER: Get: no name');
    }
    store.getValue(messagePayload.name)
        .then(function(result) {
            return callback(null, result);
        })
        .catch(function(err) {
            return callback(err);
        });
};
/**
 * Handle setting a value in the store
 * @param messagePayload {Object} the incoming message payload
 * @param store {Object} the store to set the value in
 * @param callback {function} callback function
 */
var handleSet = function(messagePayload, store, callback) {
    if (!messagePayload.name) {
        return callback('STOREHANDLER: Set: no name');
    }
    if (!messagePayload.value) {
        return callback('STOREHANDLER: Set: no value');
    }
    store.setValue(messagePayload.name, messagePayload.value, messagePayload.expiresInMinutes)
        .then(function(result) {
            return callback(null, result);
        })
        .catch(function(err) {
            return callback(err);
        });
};
/**
 * Handle removing a value in the store
 * @param messagePayload {Object} the incoming message payload
 * @param store {Object} the store to remove the value in
 * @param callback {function} callback function
 */
var handleRemove = function(messagePayload, store, callback) {
    if (!messagePayload.name) {
        return callback('STOREHANDLER: Remove: no name');
    }
    store.removeValue(messagePayload.name)
        .then(function(result) {
            return callback(null, result);
        })
        .catch(function(err) {
            return callback(err);
        });
};
/**
 * decode a message and forward it on
 * @param message
 * @param {IStore} store the store to forward messages to
 * @callback callback
 */
var handleStoreMessage = function(message, store, callback) {
    if (!message.payload) {
        return callback('STOREHANDLER: empty payload', null);
    }
    if (!store) {
        return callback('STOREHANDLER: no store');
    }
    switch (message.commandType) {
        case 'GET':
            handleGet(message.payload, store, callback);
            break;
        case 'SET':
            handleSet(message.payload, store, callback);
            break;
        case 'REMOVE':
            handleRemove(message.payload, store, callback);
            break;
        default:
            callback("unknown store command " + message.commandType, null);
            break;
    }
};
/**
 * Gets a closure to deal with passing messages to the attached store
 * @param store
 * @returns {{handleMessage: handleMessage}}
 */
export var getHandler = function(store) {
    return ({
        handleMessage: function(message, callback) {
            return handleStoreMessage(message, store, callback);
        }
    });
};



//////////////////
// WEBPACK FOOTER
// ./node_modules/@salecycle/client-script-core/src/message_channel/channels/postmessage/store_handler.js
// module id = 12
// module chunks = 0