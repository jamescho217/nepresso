$(document).ready(function() {
    var faqLightBox = $("#faq-lightbox"),
        currentBt = null,
        oldScrollTop = null;

    function hideLightBox() {
        currentBt && (currentBt.attr("aria-selected", "false"), currentBt.attr("aria-expanded", "false"), currentBt.focus(), currentBt = null), null !== oldScrollTop && ("undefined" != typeof parentIFrame && parentIFrame.scrollTo(0, oldScrollTop), oldScrollTop = null), faqLightBox.removeClass("lightbox--active"), faqLightBox.attr("aria-hidden", "true"), window.setTimeout(function() {
            faqLightBox.hide()
        }, 800)
    }
    faqLightBox.find(".lightbox__back").on("mousewheel", function(e) {
        return e.preventDefault(), e.stopPropagation(), !1
    }).on("click", function(e) {
        return e.preventDefault(), e.stopPropagation(), hideLightBox(), !1
    }), $("button.faq-question.link").on("click", function(bt) {
        bt.preventDefault(), (bt = $(this)).attr("aria-selected", "true"), bt.attr("aria-expanded", "true"), currentBt = bt, faqLightBox.source_bt = bt, window.parentIFrameInfo && (oldScrollTop = window.parentIFrameInfo.scrollTop), faqLightBox.find(".lightbox__title").html(bt.attr("data-title")), faqLightBox.find(".lightbox__description .faq-content").html(bt.attr("data-content")), faqLightBox.attr("data-faqid", bt.attr("data-faqid")), faqLightBox.attr("data-catid", bt.attr("data-catid")), faqLightBox.attr("aria-hidden", "false"), faqLightBox.show(), faqLightBox.find("#dialogheader").focus(), window.setTimeout(function() {
            var y;
            faqLightBox.find("#dialogheader").focus(), faqLightBox.addClass("lightbox--active"), "undefined" != typeof parentIFrame ? (y = $(".lightbox__wrapper").offset().top - parseInt($(".lightbox .lightbox__content").css("padding-top")) - 60, parentIFrame.scrollToOffset(0, y)) : window.scrollTo(0, $(".lightbox__wrapper").offset().top - parseInt($(".lightbox .lightbox__content").css("padding-top")))
        }, 100), jQuery.getJSON(FAQSetting.openUrl, {
            id: bt.attr("data-faqid")
        }, function() {
            return !1
        })
    }), faqLightBox.on("click", ".lightbox__close", function(e) {
        return e.preventDefault(), hideLightBox(), !1
    }), faqLightBox.on("click", "a[href=#ask]", function(url) {
        url.preventDefault();
        url = FAQSetting.closeNegative + "?id=" + faqLightBox.attr("data-faqid") + "&category_id=" + faqLightBox.attr("data-catid") + "&hideHeader=true&" + FAQSetting.userAutoFill;
        return window.open(url, FAQSetting.target), !1
    }), $(document).on("click", function(e) {
        $($(e.target).context).hasClass("lightbox--active") && $(".lightbox__close").click()
    }), $(document).keydown(function(e) {
        var focused, linkList, indexFocus;
        faqLightBox.is(":visible") && (27 == e.which && (hideLightBox(), e.preventDefault()), focused = $(document.activeElement), 13 == e.which && (focused.click(), e.preventDefault()), e.shiftKey && 9 == e.which ? (("dialogheader" == focused.attr("id") ? faqLightBox.find(".lightbox__close") : focused.hasClass("lightbox__close") ? faqLightBox.find(".lightbox__description a:last") : !focused.hasClass("lightbox__description") && focused.is("a") ? 0 <= (indexFocus = (linkList = faqLightBox.find(".lightbox__description a")).index(focused)) - 1 ? $(linkList[indexFocus - 1]) : faqLightBox.find(".lightbox__description") : faqLightBox.find("#dialogheader")).focus(), e.preventDefault()) : 9 == e.which && ("dialogheader" === focused.attr("id") ? faqLightBox.find(".lightbox__description").focus() : focused.hasClass("lightbox__description") ? faqLightBox.find(".lightbox__description a:first").focus() : !focused.hasClass("lightbox__close") && focused.is("a") ? (indexFocus = (linkList = faqLightBox.find(".lightbox__description a")).index(focused), (linkList.length > indexFocus + 1 ? $(linkList[indexFocus + 1]) : faqLightBox.find(".lightbox__close")).focus()) : faqLightBox.find("#dialogheader").focus(), e.preventDefault()))
    })
});
//# sourceMappingURL=main-d554611092d2acf1d56cd3693063b883-rev-f22bb4a.min.js.map